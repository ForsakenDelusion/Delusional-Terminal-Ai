#!/bin/bash
# 文件名: ai
# 使用方式:
#   ai "问题"               # 普通提问
#   ai --setkey API_KEY    # 设置API密钥
#   ai --memory on/off     # 管理记忆功能
#   ai --clean             # 清理对话历史
#   ai --status            # 查看当前状态
#   ai --help              # 显示帮助信息

# 配置项
CONFIG_DIR="${HOME}/.config/ai_chat"
HISTORY_FILE="${CONFIG_DIR}/dialog_history.json"
CONFIG_FILE="${CONFIG_DIR}/settings.cfg"
MAX_HISTORY=6
MAX_DAYS=3

# 初始化配置目录
mkdir -p "$CONFIG_DIR"
touch "$CONFIG_FILE"
chmod 600 "$CONFIG_FILE"

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

# 帮助信息
print_help() {
    echo -e "${YELLOW}AI 终端助手使用说明：${NC}"
    echo "  ai \"你的问题\"         普通提问"
    echo "  ai --setkey API_KEY   设置API密钥"
    echo "  ai --memory on/off    启用/禁用记忆功能"
    echo "  ai --clean            清理对话历史"
    echo "  ai --status           查看当前状态"
    echo "  ai --help             显示本帮助信息"
    echo -e "\n${YELLOW}示例：${NC}"
    echo "  ai \"用Python实现快速排序\""
    echo "  ai --memory off \"单次提问测试\""
}

# 检查依赖项
check_dependencies() {
    local missing=()
    for cmd in jq curl; do
        if ! command -v $cmd &> /dev/null; then
            missing+=("$cmd")
        fi
    done

    if [ ${#missing[@]} -gt 0 ]; then
        echo -e "${RED}错误：缺少必要依赖 - ${missing[*]}${NC}"
        echo "请通过以下命令安装："
        if [[ "$OSTYPE" == "linux-gnu"* ]]; then
            echo "sudo apt install ${missing[*]}"
        elif [[ "$OSTYPE" == "darwin"* ]]; then
            echo "brew install ${missing[*]}"
        fi
        exit 1
    fi
}

# 读取配置
read_config() {
    api_key=$(grep 'api_key=' "$CONFIG_FILE" | cut -d= -f2)
    memory_enabled=$(grep 'memory_enabled=' "$CONFIG_FILE" | cut -d= -f2)
    [ -z "$memory_enabled" ] && memory_enabled="on"
}

# 参数处理
handle_arguments() {
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --setkey)
                if [ -n "$2" ]; then
                    grep -v "api_key=" "$CONFIG_FILE" > tmp.cfg
                    echo "api_key=$2" >> tmp.cfg
                    mv tmp.cfg "$CONFIG_FILE"
                    chmod 600 "$CONFIG_FILE"
                    echo -e "${GREEN}✓ API密钥已安全存储${NC}"
                    exit 0
                else
                    echo -e "${RED}错误：请提供API密钥${NC}"
                    print_help
                    exit 1
                fi
                ;;
            --memory)
                case "$2" in
                    on|off)
                        echo "memory_enabled=$2" > "$CONFIG_FILE"
                        [ "$2" == "off" ] && rm -f "$HISTORY_FILE"
                        echo -e "${GREEN}✓ 记忆功能已${2}${NC}"
                        exit 0
                        ;;
                    *)
                        echo -e "${RED}错误：无效参数，使用 on/off${NC}"
                        print_help
                        exit 1
                        ;;
                esac
                ;;
            --clean)
                rm -f "$HISTORY_FILE"
                echo -e "${GREEN}✓ 对话历史已清理${NC}"
                exit 0
                ;;
            --status)
                read_config
                echo -e "当前状态："
                echo -e "• 记忆功能：${YELLOW}$memory_enabled${NC}"
                [ -f "$HISTORY_FILE" ] && \
                echo -e "• 历史记录：$(wc -l < "$HISTORY_FILE") 条（最后修改：$(date -r "$HISTORY_FILE" '+%Y-%m-%d %H:%M')）"
                exit 0
                ;;
            --help)
                print_help
                exit 0
                ;;
            -*)
                echo -e "${RED}错误：未知选项 $1${NC}"
                print_help
                exit 1
                ;;
            *)
                break
                ;;
        esac
        shift
    done
}

# 主程序
main() {
    check_dependencies
    read_config

    # 无参数时显示帮助
    if [ $# -eq 0 ]; then
        print_help
        exit 0
    fi

    # 检查API密钥
    if [ -z "$api_key" ]; then
        echo -e "${RED}错误：未找到API密钥${NC}"
        echo -e "请使用以下命令设置密钥："
        echo -e "  ai --setkey 你的DeepSeek_API密钥"
        exit 1
    fi

    # 自动清理旧历史
    find "$CONFIG_DIR" -name "*.json" -mtime +$MAX_DAYS -delete 2>/dev/null

    # 处理提问
    local question="$1"
    
    # 记忆功能处理
    if [ "$memory_enabled" = "on" ]; then
        [ ! -f "$HISTORY_FILE" ] && echo '[{"role": "system", "content": "You are a helpful assistant."}]' > "$HISTORY_FILE"
        
        # 添加用户提问
        jq --arg input "$question" '. += [{"role": "user", "content": $input}]' "$HISTORY_FILE" > tmp.json
        mv tmp.json "$HISTORY_FILE"

        # 构建请求
        REQUEST_JSON=$(jq -n \
            --arg model "deepseek-chat" \
            --slurpfile history "$HISTORY_FILE" \
            '{model: $model, messages: $history[0], stream: false}')
    else
        REQUEST_JSON=$(jq -n \
            --arg input "$question" \
            '{
                "model": "deepseek-chat",
                "messages": [
                    {"role": "system", "content": "You are a helpful assistant."},
                    {"role": "user", "content": $input}
                ],
                "stream": false
            }')
    fi

    # 发送请求
    response=$(curl -s https://api.deepseek.com/chat/completions \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $api_key" \
        -d "$REQUEST_JSON")

    # 处理响应
    if ! echo "$response" | jq -e '.choices[].message.content' >/dev/null 2>&1; then
        echo -e "${RED}请求失败："
        echo "$response" | jq -r .error.message
        exit 1
    fi

    reply=$(echo "$response" | jq -r '.choices[0].message.content')
    echo -e "${GREEN}AI:${NC} $reply"

    # 保存回复（记忆模式开启时）
    if [ "$memory_enabled" = "on" ]; then
        response_msg=$(echo "$response" | jq '.choices[0].message')
        jq --argjson msg "$response_msg" '. += [$msg]' "$HISTORY_FILE" > tmp.json
        jq ".[-${MAX_HISTORY}:]" tmp.json > "$HISTORY_FILE"
    fi
}

# 启动程序
handle_arguments "$@"
main "$@"