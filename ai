#!/bin/bash
# 使用方式:
#   ai "问题"                # 使用当前记忆状态
#   ai --memory on          # 开启记忆并继续对话
#   ai --memory off         # 关闭记忆并清理历史
#   ai --clean              # 手动清理历史
#   ai --status             # 查看当前状态

# 配置项
CONFIG_DIR="${HOME}/.config/ai_chat"
HISTORY_FILE="${CONFIG_DIR}/dialog_history.json"
CONFIG_FILE="${CONFIG_DIR}/settings.cfg"
API_KEY="${DEEPSEEK_API_KEY}"    # 从环境变量读取
MAX_HISTORY=6                    # 最大对话轮次
MAX_DAYS=3                       # 自动清理天数

# 初始化配置目录
mkdir -p "$CONFIG_DIR"
touch "$CONFIG_FILE"

# 读取配置
memory_enabled=$(grep 'memory_enabled=' "$CONFIG_FILE" | cut -d= -f2)
[ -z "$memory_enabled" ] && memory_enabled="on"  # 默认开启记忆

# 处理特殊参数
case "$1" in
    "--memory")
        case "$2" in
            "on")
                echo "memory_enabled=on" > "$CONFIG_FILE"
                echo "记忆功能已启用"
                exit 0
                ;;
            "off")
                echo "memory_enabled=off" > "$CONFIG_FILE"
                [ -f "$HISTORY_FILE" ] && rm "$HISTORY_FILE"
                echo "记忆功能已禁用并清理历史"
                exit 0
                ;;
            *)
                echo "无效参数，使用: --memory [on|off]"
                exit 1
                ;;
        esac
        ;;
    "--clean")
        [ -f "$HISTORY_FILE" ] && rm "$HISTORY_FILE"
        echo "对话历史已清理"
        exit 0
        ;;
    "--status")
        echo "当前记忆状态: $memory_enabled"
        [ -f "$HISTORY_FILE" ] && echo "历史记录存在（最后修改于: $(date -r "$HISTORY_FILE"))"
        exit 0
        ;;
    "--help")
        echo "AI 终端助手用法:"
        echo "  ai \"问题\"          普通提问"
        echo "  ai --memory on     启用记忆功能"
        echo "  ai --memory off    禁用记忆并清理历史"
        echo "  ai --clean         手动清理历史记录"
        echo "  ai --status        查看当前状态"
        exit 0
        ;;
esac

# 自动清理过期历史（每次运行检查）
find "$CONFIG_DIR" -name "*.json" -mtime +$MAX_DAYS -exec rm {} \; 2>/dev/null

# 如果没有问题参数则退出
[ -z "$1" ] && echo "请输入问题或使用 --help 查看帮助" && exit 1

# 处理记忆功能
if [ "$memory_enabled" = "on" ]; then
    # 初始化历史文件
    [ ! -f "$HISTORY_FILE" ] && echo '[{"role": "system", "content": "You are a helpful assistant."}]' > "$HISTORY_FILE"
    
    # 添加用户提问
    jq --arg input "$1" '. += [{"role": "user", "content": $input}]' "$HISTORY_FILE" > tmp.json && mv tmp.json "$HISTORY_FILE"
    
    # 构造请求数据
    REQUEST_JSON=$(jq -n \
        --arg model "deepseek-chat" \
        --slurpfile history "$HISTORY_FILE" \
        '{model: $model, messages: $history[0], stream: false}')
else
    # 无记忆模式
    REQUEST_JSON=$(jq -n \
        --arg input "$1" \
        '{
            "model": "deepseek-chat",
            "messages": [
                {"role": "system", "content": "You are a helpful assistant."},
                {"role": "user", "content": $input}
            ],
            "stream": false
        }')
fi

# 发送请求
response=$(curl -s https://api.deepseek.com/chat/completions \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $API_KEY" \
  -d "$REQUEST_JSON")

# 处理回复
reply=$(echo "$response" | jq -r '.choices[0].message.content')
echo "AI: $reply"

# 保存AI回复（仅在记忆模式开启时）
if [ "$memory_enabled" = "on" ]; then
    # 提取AI回复消息
    response_msg=$(echo "$response" | jq '.choices[0].message')

    # 安全追加到历史文件
    if [ -f "$HISTORY_FILE" ]; then
        jq --argjson msg "$response_msg" '. += [$msg]' "$HISTORY_FILE" > tmp.json && mv tmp.json "$HISTORY_FILE"
    else
        echo "[$response_msg]" > "$HISTORY_FILE"
    fi

    # 控制历史长度（保留最近的MAX_HISTORY轮对话）
    jq ".[-${MAX_HISTORY}:]" "$HISTORY_FILE" > tmp.json && mv tmp.json "$HISTORY_FILE"
fi
